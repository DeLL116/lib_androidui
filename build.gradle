apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.ext.configs.compileSdkVersion
    buildToolsVersion rootProject.ext.configs.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.configs.minSdkVersion
        targetSdkVersion rootProject.ext.configs.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "store", "api", "device"

    productFlavors {
        // --> Store Flavor Dimension Types for different app store platforms
        //     Google = Google Play // Amazon = Amazon App Store
        google {
            dimension "store"
        }
        amazon {
            dimension "store"
        }

        // --> API Flavor Dimension Types for different build platforms
        //     Prod = Production // Stage = Staging // dev = development
        prod {
            dimension "api"
        }
        stage {
            dimension "api"
        }
        dev {
            dimension "api"
        }

        // --> API Flavor Dimension Types for different device form-factor profiles
        //     Phone = Mobile Phone // Tablet = a Tablet // TV = 10ft Leanback
        phone {
            dimension "device"
        }
        tablet {
            dimension "device"
        }
        tv {
            dimension "device"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    api project(':lib_retronetworking')

    // --> Local Unit Testing
    testImplementation "junit:junit:$libs.junitVersion"
    testImplementation "org.mockito:mockito-all:$libs.mockitoAllVersion"
    testImplementation "org.hamcrest:hamcrest-all:$libs.hamcrestAllVersion"
    testImplementation "org.powermock:powermock-module-junit4:$libs.powermockModuleJunit4Version"
    testImplementation "org.powermock:powermock-api-mockito:$libs.powermockApiMockitoVersion"

    // --> Implementation / Espresso Testing
    androidTestImplementation "androidx.test:rules:$libs.rulesVersion"
    androidTestImplementation "androidx.test:runner:$libs.runnerVersion"
    androidTestImplementation "androidx.test.ext:junit:$libs.junitAndroidVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$libs.espressoCoreVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$libs.espressoContribVersion"
    api "androidx.test.espresso:espresso-idling-resource:$libs.espressoIdlingResourceVersion"           // Note...uses api not testApi!

    // **** The following are not duplicates, but rather a necessary evil for now ****
    // These dependencies are needed for the classes contained in
    // the *debug* source-sets folder for com.nochino.support.androidui.testing
    // These dependencies must be referenced as a normal
    // implementations, but FOR DEBUG BUILDS ONLY. Build failures will occur in proguard
    // obfuscated release builds if these are used (hence...use of debugApi)!
    // TODO :: Create module solely for instrumentation tests -->
    // --> See https://developer.android.com/studio/test/#use_separate_test_modules_for_instrumented_tests
    debugApi "androidx.test:rules:$libs.testRulesVersion"
    debugApi "androidx.test:runner:$libs.testRunnerVersion"
    debugApi "androidx.test:core-ktx:$libs.testCoreKtxVersion"
    debugApi "androidx.test.ext:junit:$libs.junitAndroidVersion"
    debugApi "androidx.test.ext:junit-ktx:$libs.junitKtxVersion"
    debugApi "androidx.test.espresso:espresso-core:$libs.espressoCoreVersion"
    debugApi "androidx.test.espresso:espresso-contrib:$libs.espressoContribVersion"

    // --> Android Support / UI
    api "androidx.cardview:cardview:$libs.cardviewVersion"
    api "androidx.appcompat:appcompat:$libs.appcompatVersion"
    api "androidx.recyclerview:recyclerview:$libs.recyclerviewVersion"
    api "com.google.android.material:material:$libs.googleMaterialVersion"
    api "androidx.legacy:legacy-support-v4:$libs.legacySupportV4Version"
    api "androidx.constraintlayout:constraintlayout:$libs.constraintLayoutVersion"

    // ViewModel / LiveData
    api "androidx.lifecycle:lifecycle-extensions:$libs.lifecycleExtensionsVersion"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$libs.lifecycleViewModelKtxVersion"

    // --> Android Architecture
    api "android.arch.navigation:navigation-ui-ktx:$libs.navUiKtxVersion"
    api "android.arch.navigation:navigation-fragment-ktx:$libs.navFragmentKtxVersion"

    // --> Kotlin
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$libs.kotlinVersion"
    api "org.jetbrains.kotlin:kotlin-reflect:$libs.kotlinVersion"

    // --> Square / Jake Wharton
    // Image Loading
    implementation "com.squareup.picasso:picasso:$libs.picassoVersion"
    // Enhanced Logging
    api "com.jakewharton.timber:timber:$libs.timberVersion"

    // --> Detecting Memory Leaks
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$libs.leakcanaryAndroidVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$libs.leakcanaryAndroidVersion"
}
